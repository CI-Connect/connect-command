#!/usr/bin/env python

# /usr/bin/env python is the correct way to invoke a program,
# but we can't do it because of CERN's terrible habit of mucking
# up the user's environment - you get a python in $PATH that does
# not have htcondor installed.

import os
import sys
import string
import ConfigParser
import StringIO
import getopt

# Modules to preload into python plugins
PluginModules = 'os sys getopt'.split()

# Modules to preload into python plugins, importing all symbols
PluginModulesAll = 'htcondor'.split()

p = os.path.basename(sys.argv[0])
d = os.path.dirname(sys.argv[0]) + '/'
Libraries = [
	'/etc/ciconnect',
	os.path.expanduser('~/lib/' + p),
	d.replace('/bin/', '/lib/'),
	d.replace('/bin/', '/etc/'),
	sys.argv[0].replace('/bin/', '/lib/'),
	os.path.join('/usr/lib', p),
]

Excludes = [os.path.join(x, 'exclude') for x in Libraries]
Exposes = [os.path.join(x, 'expose') for x in Libraries]
Extensions = [os.path.join(x, 'extensions') for x in Libraries]
Configs = [os.path.join(x, 'config.ini') for x in Libraries]

# Add Libraries paths to python search path
pylib = 'python%d.%d/site-packages' % (sys.version_info[0], sys.version_info[1])
sys.path = [os.path.join(_, pylib) for _ in Libraries] + sys.path


class ConnectException(Exception): pass

DefaultConfig = '''
[connect]
blacklist = /etc/ciconnect/project_blacklist
'''

class ConnectConfig(ConfigParser.RawConfigParser):
	cleantrans = ['_'] * 256
	for c in string.ascii_letters + string.digits:
		cleantrans[ord(c)] = c
	cleantrans = ''.join(cleantrans)

	def _clean(self, s):
		return s.translate(self.cleantrans)

	def toEnv(self):
		for section in self.sections():
			for option in self.options(section):
				key = self._clean(section) + '_' + self._clean(option)
				yield((key, self.get(section, option)))

	def toShell(self):
		for key, val in self.toEnv():
			val = val.replace('\\', '\\\\').replace("'", "\\'")
			yield "%s='%s'" % (key, val)
			yield('export ' + key)


class PluginProxy(object):
	arg0 = os.path.basename(sys.argv[0])
	agent = ''

	# Local symbols to export to plugins
	exports = 'error debug info usage sh xsh'.split()

	def error(self, *args):
		agent = self.agent
		if agent:
			agent += ' '
		print >>sys.stderr, ('%s: %serror:' % (self.arg0, agent)), ' '.join(args)

	def debug(self, *args):
		agent = self.agent
		if agent:
			agent += ' '
		print >>sys.stdout, ('%s: %sdebug:' % (self.arg0, agent)), ' '.join(args)

	def info(self, *args):
		agent = self.agent
		if agent:
			agent += ' '
		print >>sys.stdout, ('%s %s:' % (self.arg0, agent)), ' '.join(args)

	def help(self, *args):
		yield '@ ' + ' '.join(args)

	def sh(self, command):
		fp = os.popen(command, 'r')
		data = fp.read()
		fp.close()
		return data

	def xsh(self, command):
		fp = os.popen(command, 'r')
		for line in fp:
			yield line
		fp.close()


class commandtype(object):
	def __init__(self, config, name, data):
		self.name = name
		self.data = data
		self.config = config
		self.secret = False
		if hasattr(self, '__subinit__'):
			self.__subinit__()

		os.environ['ARGV0'] = sys.argv[0]
		os.environ['ARGV0DIR'] = os.path.dirname(sys.argv[0])
		os.environ['ARGV0BASE'] = os.path.basename(sys.argv[0])

	@staticmethod
	def splitpath(*args):
		if args:
			return args[0].split(':')
		elif 'PATH' in os.environ:
			return os.environ['PATH'].split(':')
		else:
			return []

	@classmethod
	def discover(cls, config, *args, **kwargs):
		if 'exts' in kwargs:
			exts = kwargs['exts']
		else:
			exts = []

		if 'prefixes' in kwargs:
			prefixes = kwargs['prefixes']
		else:
			prefixes = []

		if 'dirs' in kwargs:
			dirs = kwargs['dirs']
		elif 'path' in kwargs:
			dirs = cls.splitpath(kwargs['path'])
		else:
			dirs = cls.splitpath()

		def pfxfilter(file):
			for prefix in prefixes:
				if file.startswith(prefix):
					return True
			return False

		def extfilter(file):
			base, ext = os.path.splitext(file)
			if ext and ext in exts:
				return True
			return False

		for dir in dirs:
			try:
				files = os.listdir(dir)
			except OSError:
				continue
			if prefixes:
				files = filter(pfxfilter, files)
			if exts:
				files = filter(extfilter, files)
			for name, path in [(file, os.path.join(dir, file)) for file in files]:
				yield cls(config, name, path)


	def __call__(self, *args, **kwargs):
		'''dummy'''
		return False

	def help(self):
		yield '@'


class builtintype(commandtype):
	@classmethod
	def discover(cls, config, namespace=globals()):
		for name in namespace:
			if name.startswith('builtin_'):
				cmd = cls(config, name[8:], namespace[name])
				try:
					cmd.secret = namespace[name].secret
				except AttributeError:
					cmd.secret = False
				yield cmd

	def __call__(self, *args, **kwargs):
		handler = self.data
		return handler(*args, **kwargs)

	def help(self):
		handler = self.data
		if not handler.__doc__:
			yield None
			return
		for line in handler.__doc__.strip().split('\n'):
			yield line

class condortype(commandtype):
	@classmethod
	def discover(cls, config, *args, **kwargs):
		for cmd in commandtype.discover(config, *args, **kwargs):
			cmd = cls(config, cmd.name[7:], cmd.data)
			cmd.secret = True
			yield cmd

	def __call__(self, *args, **kwargs):
		try:
			os.execv(self.data, [self.data] + list(args))
		except OSError, e:
			raise ConnectException, 'cannot run %s: %s' % (self.data, str(e.errno))

	def help(self):
		fp = os.popen(self.data + ' -h')
		for line in fp:
			line = line.rstrip()
			if line.lower().startswith('usage:'):
				yield '@ ' + ' '.join(line.split()[2:])
			else:
				yield line
		fp.close()

class pyexttype(commandtype):
	@classmethod
	def discover(cls, config, *args, **kwargs):
		kwargs['exts'] = ['.py']
		for cmd in commandtype.discover(config, *args, **kwargs):
			dir, modname = os.path.dirname(cmd.data), os.path.basename(cmd.data)
			if modname.endswith('.py'):
				modname = modname[:-3]
			yield cls(config, modname, dir)

	def __subinit__(self):
		saved = sys.path
		sys.path = [self.data] + list(sys.path)
		self.mod = __import__(self.name)
		sys.path = saved

		self.mod.agent = self.name
		self.mod.proxy = PluginProxy()
		self.mod.proxy.agent = self.mod.agent
		self.mod.config = self.config

		if hasattr(self.mod, 'help'):
			self.help = self.mod.help
		elif hasattr(self.mod, 'usage'):
			self.help = self.mod.usage
		else:
			self.help = self.usage

		if hasattr(self.mod, 'secret'):
			self.secret = self.mod.secret

		for name in self.mod.proxy.exports:
			try:
				setattr(self.mod, name, getattr(self.mod.proxy, name))
			except AttributeError, e:
				pass

		for name in PluginModules:
			try:
				setattr(self.mod, name, __import__(name))
			except ImportError, e:
				setattr(self.mod, name, None)

		for name in PluginModulesAll:
			try:
				tmp = __import__(name)
				setattr(self.mod, name, tmp)
				for name in tmp.__dict__:
					setattr(self.mod, name, getattr(tmp, name))
			except:
				setattr(self.mod, name, None)

		if hasattr(self.mod, 'setup'):
			self.mod.setup()


	def __call__(self, *args, **kwargs):
		# in a python extension, module.run must be a callable
		os.environ['AGENT'] = self.mod.__file__
		return self.mod.run(*args, **kwargs)


class shexttype(commandtype):
	@classmethod
	def discover(cls, config, *args, **kwargs):
		kwargs['exts'] = ['.sh', '.shh']
		for cmd in commandtype.discover(config, *args, **kwargs):
			modname = cmd.name
			secret = False
			if modname.endswith('.sh'):
				modname = modname[:-3]
			if modname.endswith('.shh'):
				modname = modname[:-4]
				secret = True
			_ = cls(config, modname, cmd.data)
			_.secret = secret
			yield _

	def __call__(self, *args, **kwargs):
		os.environ['AGENT'] = self.data
		# in a shell extension, the module should run under /bin/sh
		# and directly produce intended results
		cmd = ' '.join(['/bin/sh', '-s', '-'] + list(args))
		sh = os.popen(cmd, 'w')
		for line in self.config.toShell():
			sh.write(line + '\n')
		fp = open(self.data, 'r')
		for line in fp:
			sh.write(line)
		fp.close()
		rc = sh.close()
		if rc is None:
			rc = 0
		else:
			rc = os.WEXITSTATUS(rc)
		sys.exit(rc)
		#os.execv('/bin/sh', [self.name, self.data] + list(args))

	def help(self):
		# there are two ways to embed usage/help into a shell extension:
		#
		# 1. line by line
		#     # @help @ [options] arguments
		#     # @help    ...help text...
		#     # @help    ...more help text...
		#
		# 2. in blocks:
		#     # @help.begin
		#     # @ [options] arguments
		#     #     ...help text...
		#     #     ...more help text...
		#     # @help.end
		#
		# In either case, a lone "@" is replaced by "usage:" and the
		# calling syntax for the subcommand in question. (Generally
		# this is "connect subcommand".)  The usage lines are reported
		# for usage summaries. The entire help is reproduced for long
		# help statements (connect help ...).

		# self.data contains path
		fp = open(self.data, 'r')
		something = False
		helpoff = -1
		for line in fp:
			if helpoff >= 0:
				if '@help.end' in line:
					helpoff = -1
				else:
					something = True
					yield line[helpoff:].rstrip()
				continue

			if '@help.begin' in line:
				helpoff = line.find('@help.begin')
				continue

			if '@help' in line:
				line = line[line.index('@help') + 5:].rstrip()
				if line and line[0] == ' ':
					line = line[1:]
				something = True
				yield line
				continue

			# for backward compatibility
			if '@usage' in line:
				line = line[line.index('@usage') + 6:].rstrip()
				if line and line[0] == ' ':
					line = line[1:]
				if line != '':
					something = True
				yield line
				continue

		if not something:
			# at least show usage
			yield '@'

		fp.close()


class Main(object):
	def __init__(self):
		self.arg0 = os.path.basename(sys.argv[0])

	def error(self, *args):
		print >>sys.stderr, self.arg0 + ': ' + ' '.join(args)

	def usage(self, *args):
		print >>sys.stderr, 'usage: %s <subcommand> [args]' % self.arg0

		for cmd in [x for x in self.cmds if not x.name.startswith('.')]:
			if cmd.secret:
				continue
			if args and cmd.name not in args:
				continue
			for line in cmd.help():
				line = line.rstrip()
				if line == '@' or line.startswith('@ '):
					print >>sys.stderr, \
					      '       %s %s %s' % (self.arg0, cmd.name, line[1:].strip())

		print
		print 'See "%s help <subcommand>" for more details.' % self.arg0
		return 2

	def secret(f, *args, **kwargs):
		f.secret = True
		return f

	@secret
	def builtin_config(self, *args, **kwargs):
		'''@
		Show the connect configuration.
		'''
		self.config.write(sys.stdout)
		return 10

	@secret
	def builtin_shconfig(self, *args, **kwargs):
		'''@
		Show the connect configuration as Bourne shell statements.
		'''
		for line in self.config.toShell():
			print line
		return 10

	@secret
	def builtin_debug(self, *args, **kwargs):
		'''@
		Start an interactive Python shell within the connect command.
		'''

		try:
			from IPython import embed
			return embed()
		except ImportError:
			pass

		try:
			from IPython.Shell import IPShellEmbed as embed
			return embed()()
		except ImportError:
			pass

		self.error('install IPython to use debug')
		return 10

	def builtin_help(self, *args, **kwargs):
		'''@ [subcommands...]
		Get help for the connect command or any subcommands.
		'''

		if not args:
			return self.usage()

		args = dict([x, None] for x in args)
		for cmd in self.cmds:
			if cmd.name in args:
				del args[cmd.name]
				for line in cmd.help():
					if line is None:
						break
					if line and line[0] == '@':
						print >>sys.stderr, \
						      'usage: %s %s %s' % (self.arg0, cmd.name, line[1:].strip())
					elif line and line[0] in string.whitespace:
						print >>sys.stderr, '       ' + line.strip()
					elif line and line[0] == '>':
						# preserve space
						print >>sys.stderr, line[1:]
					else:
						print >>sys.stderr, line
				print >>sys.stderr

		for arg in sorted(args.keys()):
			print >>sys.stderr, 'Unknown subcommand: %s' % arg


	def discovercommands(self):
		# build filter
		# XXX TODO needs to use Matcher().  And use it on both name and
		# path (data).  This way we can affect whole dirs of programs.
		def lines(fp):
			for line in fp:
				line = line.strip()
				if line == '' or line.startswith('#'):
					continue
				yield line
		def readfiles(filelist):
			result = []
			for fn in filelist:
				try:
					fp = open(fn, 'r')
				except IOError:
					continue
				result.extend(lines(fp))
				fp.close()
			return result

		excludes = readfiles(Excludes)
		exposes = readfiles(Exposes)

		builtin_ns = dict([(k, getattr(self, k)) for k in dir(self)])
		generators = [
			# once we have Matcher(), we should discard path=
			pyexttype.discover(self.config, dirs=Extensions),
			shexttype.discover(self.config, dirs=Extensions),
			condortype.discover(self.config, prefixes=['condor_'], path='/usr/bin:/usr/local/bin:' + os.path.expanduser('~/bin')),
			# builtins come last so that extensions can supersede
			builtintype.discover(self.config, namespace=builtin_ns),
		]

		cmds = []
		cmddict = {}
		for generator in generators:
			for cmd in generator:
				if cmd.name not in cmddict:
					if cmd.name in excludes:
						cmd.secret = True
					if cmd.name in exposes:
						cmd.secret = False
					cmds.append(cmd)
					cmddict[cmd.name] = cmd

		return cmds, cmddict


	def __call__(self, args):
		self.cmds = []
		self.cmddict = {}

		self.config = ConnectConfig()
		fp = StringIO.StringIO(DefaultConfig)
		self.config.readfp(fp)
		fp.close()
		for path in Configs:
			self.config.read(path)

		self.cmds, self.cmddict = self.discovercommands()
		self.cmds.sort(lambda a, b: cmp(a.name, b.name))

		# Check usage
		if not args:
			return self.usage()

		try:
			opts, args = getopt.getopt(args, 'h', ['help'])
		except getopt.GetoptError, e:
			self.error(str(e))
			return 10

		for opt, arg in opts:
			if opt in ('-h', '--help'):
				self.usage(*args)
				return 2

		# Find and execute subcommand
		subcmd = args.pop(0)
		if subcmd not in self.cmddict:
			self.error('unknown command: %s' % subcmd)
			return 2

		return self.cmddict[subcmd](*args)


if __name__ == '__main__':
	try:
		main = Main()
		sys.exit(main(sys.argv[1:]))
	except KeyboardInterrupt:
		print >>sys.stderr, '\ninterrupt'
